## Pipeline and steps:

#Methods
#Project Setup
All analyses were conducted within a dedicated project directory. Raw sequencing data, including Oxford Nanopore, MGI reads, and HiC data for both male and female Anastrepha fraterculus samples, were organized accordingly.


Quality Control
Initial quality control was performed using FastQC to assess read quality. The total number of reads for female and male samples were determined using the wc command. K-mer analysis and genome size estimation were conducted using Jellyfish and GenomeScope. The k-mer counts were obtained with the following commands:
```bash
zcat female_reads.fastq.gz | jellyfish count -C -m 21 -s 100000000000 -t 20 -o Female_reads.jf
jellyfish histo -t 30 Female_reads.jf > Female_reads.histo

zcat male_reads.fastq.gz | jellyfish count -C -m 21 -s 100000000000 -t 20 -o Male_reads.jf
jellyfish histo -t 30 Male_reads.jf > Male_reads.histo
```
Histograms were then analyzed using GenomeScope to estimate genome size and heterozygosity.
Genome Assembly
Genome assemblies were performed using Canu. Separate assemblies were generated for male and female samples using the following commands:
```bash
canu -p assemblyFemale -d assemblyFemale genomeSize=615m -useGrid=false -maxMemory=800g -maxThreads=90 -nanopore-raw female_reads.fastq.gz

canu -p assemblyMale -d assemblyMale genomeSize=615m -useGrid=false -maxMemory=800g -maxThreads=90 -nanopore-raw male_reads.fastq.gz
```
Polishing and Purging
Polishing was performed using Jasper with pre-calculated k-mer counts:
```bash
jasper.sh --jf 'Female_reads.jf' -a assemblyFemale.contigs.fasta -k 29 -t 40 -p 4
jasper.sh --jf 'Male_reads.jf' -a assemblyMale.contigs.fasta -k 29 -t 40 -p 4
```
Duplicates were purged using the Purge Dups pipeline:
```bash
purge_dups/run_purge_dups.py -p bash FemaleCanuAsm.json /path/to/purge_dups/bin/ FemaleAfrat
purge_dups/run_purge_dups.py -p bash MaleCanuAsm.json /path/to/purge_dups/bin/ MaleAfrat
```
HiC Data Processing and Scaffolding of Male
HiC data for the male sample was processed using BWA and Pairtools. Reads were mapped, parsed, sorted, and deduplicated:
```bash
bwa mem -5SP -T0 -t 20 MaleCanuPurgedPolished.fa /path/to/HiC_read1.fastq.gz /path/to/HiC_read2.fastq.gz > bwaMemMalePurgeCanuPolish.sam

pairtools parse --min-mapq 40 --walks-policy 5unique --max-inter-align-gap 30 --nproc-in 10 --nproc-out 10 --chroms-path MaleCanuPurgedPolished.genome -o parsePairsMaleCanuPurgePolish.txt --output-stats parsePairsMaleCanuPurgePolish_stats.txt bwaMemMalePurgeCanuPolish.sam
pairtools sort --memory 150G --tmpdir=/tmp --nproc 15 -o parsedMaleSortBWACanuPurgedPolished.pairsam parsePairsMaleCanuPurgePolish.txt

pairtools dedup --nproc-in 10 --nproc-out 10 --mark-dups --output-stats parsedMaleSortBWACanuPurgedPolishedDedupStats.txt -o parsedMaleSortBWACanuPurgedPolishedDedup.pairsam parsedMaleSortBWACanuPurgedPolished.pairsam
```
Scaffolding was conducted using YAHS for HIC data
```bash
yahs -o yahsOminCanuPurgPolisdedupR2000 --no-mem-check -r 2000 8000 15000000 --read-length 150 MaleCanuPurgedPolished.fa.polished mapped_parsedSplitMaleSortBWACanuPurgedPolishedDedup.bed

scaffold RagTag using Female as reference first for Male, then Male as ref for female (no sequence breaks):
ragtag.py scaffold -t 40 --aligner minimap2 -o RagTagScaffFemale -u -r reference.fa assemblyFemaleCanuPurgPolished.fa
ragtag.py scaffold -t 40 --aligner minimap2 -o RagTagScaffMale -u -r RagTagScaffFemale/ragtag.scaffold.fasta yahsOminCanuPurgPolisdedupR2000_scaffolds_final.fa
```
Quality Control and Assessment
BUSCO was used to assess the completeness of the assemblies after every step and between assembly algoritms:
```bash
busco -m genome -c 30 -i assemblyFemaleCanuPurgPolished.fa -o FemaleCanuAsembPurged_busco -l diptera_odb10
busco -m genome -c 30 -i MaleCanuPurgPolished.fa -o MaleCanuAsembPurged_busco -l diptera_odb10
```
K-mer comparisons were conducted using KAT:
```bash
kat plot spectra-mx -t "Male Reads vs Assembly" -i -o maleReads_AsmMale kat_maleReads_assembly.mx
```
Mitochondrial Genome Assembly
The mitochondrial genome was assembled using GetOrganelle:
```bash
get_organelle_from_reads.py -1 male_WGS_R1.fastq.gz -2 male_WGS_R2.fastq.gz -F animal_mt -o MaleWGSmitogenome -R 10 -t 25
```
Genome Annotation
Annotations were performed using GenSAS, and comparative genomics analysis was conducted using OrthoVenn3.
Synteny Analysis
Synteny analysis was performed using NGenomeSyn with the following command:
```bash
GetTwoGenomeSyn.pl -InGenomeA FemaleRagTag.fa -InGenomeB AnaLude1.1_genomic.fna -OutPrefix FemaleA2AnaLudB_50k -MappingBin minimap2 -BinDir /path/to/minimap2/ -MinLenA 50000 -MinLenB 50000 -NumThreads 25
```


